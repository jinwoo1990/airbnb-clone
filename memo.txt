# django setting
django-admin startproject config
- config 로 폴더가 생성된 다음에 그 안에 있는 manage.py 와 config 폴더를 밖으로 빼서 구성하는 게 프로덕션에 더 적절

# django migration
데이터 유형이 바뀌면 (모델에 데이터를 추가하면) makemigrations을 통해 그 정보를 가져오고
migrate 으로 쟝고를 사용해 데이터베이스에 반영
(SQL을 사용할 필요 없음, 데이터베이스에 장고와 동일한 데이터 유형의 동기화를 위해 migrate을 함)

# django 개념
project 는 app 의 묶음
app 은 function 의 묶음 (room 을 생성, 검색, 수정, 보여주기..)
작게 app 을 만드는 게 좋음

# django app
room 보다는 rooms 같이 복수로 작성
- admin.py: admin 패널에 어떻게 보일 지 결정
- apps.py: 그냥 셋팅
- models.py: 데이터, 데이터베이스가 어떻게 생겨야 하는 지
- tests.py: 테스트
- views.py: 사용자들이 보게 될 것
- urls.py: 만들어서 config 에 urls.py 에 연동해 각각 app 에 관련된 url 을 따로 관리 가능

# 모델 상속
class Dog():
    legs = 4
    eyes = 2

class GoldenR(Dog):  # 이런 식으로 Dog 를 상속할 수 있음
    color = "yellow"

보통은 models.Model 을 상속 받아 사용
(users 에서 admin 에 user 를 상속받고 싶을 때는 users.models.py 에 있는 것처럼)

# model
default="" 를 넣는 이유는 이미 데이터베이스에 값이 있기 때문에 나중에 컬럼 추가하면 default 값이 필요함
아니면 bio = models.TextField(null=True) 로 해서 null 값을 채우게 할 수 있음

choices 를 바꾼 변화는 데이터베이스에 영향을 준 것이 아니라 form 에 영향을 준 것이므로 migrate 할 필요 없
blank=True 를 하면 form 에서 작동하고 null=True 는 데이터베이스에서만 작동. 만약 admin 창에서 required field 메세지를 보고 싶지 않으면 blank=True 를 써야 함

# migrations
웬만하면 1번만 하는 것이 좋음